---
// Importaciones
import Layout from '../../layouts/Layout.astro';
import { getCurrentUser } from '../../lib/auth';

// Para GitHub Pages (build est√°tico)
export async function getStaticPaths() {
  return [];
}

const { id } = Astro.params;
const user = getCurrentUser();
---

<Layout title="Estaci√≥n Terrena">
  <main class="station-container">
    <!-- Contenedor para la carga din√°mica -->
    <div id="station-content">
      <p>Cargando informaci√≥n de la estaci√≥n...</p>
    </div>
  </main>

  <!-- Script que solo se ejecuta en el cliente -->
  <script>
    // Importaciones din√°micas
    const { getStationById, updateStation, deleteStation, uploadStationFile, deleteStationFile } = await import('../../lib/stations');
    const { getCurrentUser } = await import('../../lib/auth');
    
    // Elementos del DOM
    const contentEl = document.getElementById('station-content');
    const user = getCurrentUser();
    const stationId = new URL(window.location.href).pathname.split('/').filter(Boolean).pop();
    
    // Cargar datos de la estaci√≥n
    async function loadStation() {
      try {
        const station = await getStationById(stationId);
        
        if (!station) {
          window.location.href = '/404';
          return;
        }
        
        const isOwner = user && station.ownerId === user.uid;
        
        // Renderizar la estaci√≥n
        contentEl.innerHTML = `
          <div class="station-header">
            <h1>${station.name}</h1>
            ${isOwner ? `
              <div class="station-actions">
                <a href="/stations/${stationId}/edit" class="btn">Editar</a>
                <button onclick="handleDeleteStation()" class="btn danger">Eliminar</button>
              </div>
            ` : ''}
          </div>
          
          <p class="station-description">${station.description}</p>
          
          ${isOwner ? `
            <div class="visibility-toggle">
              <label>
                <input 
                  type="checkbox" 
                  ${station.isPublic ? 'checked' : ''}
                  onchange="handleToggleVisibility(event)"
                />
                <span>Estaci√≥n p√∫blica (visible para todos)</span>
              </label>
            </div>
          ` : ''}
          
          <section class="files-section">
            <h2>Archivos ${station.files?.length ? `(${station.files.length})` : ''}</h2>
            
            ${station.files?.length > 0 ? `
              <div class="files-grid">
                ${station.files.map(file => `
                  <div class="file-card">
                    <a href="${file.url}" target="_blank" class="file-link">
                      <div class="file-icon">${getFileIcon(file.type)}</div>
                      <div class="file-info">
                        <div class="file-name">${file.name}</div>
                        <div class="file-meta">
                          ${formatFileSize(file.size)} ‚Ä¢ ${new Date(file.uploadedAt).toLocaleDateString()}
                        </div>
                      </div>
                    </a>
                    ${isOwner ? `
                      <button 
                        onclick="handleDeleteFile('${file.name}')" 
                        class="delete-btn"
                        title="Eliminar archivo"
                      >
                        üóëÔ∏è
                      </button>
                    ` : ''}
                  </div>
                `).join('')}
              </div>
            ` : `
              <p class="empty-files">No hay archivos en esta estaci√≥n</p>
            `}
            
            ${isOwner ? `
              <div class="upload-area">
                <label for="file-upload" class="upload-label">
                  <span>+ Subir archivo</span>
                  <input 
                    type="file" 
                    id="file-upload" 
                    onchange="handleFileUpload(event)"
                  />
                </label>
              </div>
            ` : ''}
          </section>
        `;
        
        // Funciones de manejo (solo para due√±os)
        if (isOwner) {
          window.handleDeleteStation = async () => {
            if (confirm('¬øEst√°s seguro de eliminar esta estaci√≥n?')) {
              try {
                await deleteStation(stationId, user.uid);
                window.location.href = '/';
              } catch (error) {
                showError(error.message);
              }
            }
          };
          
          window.handleFileUpload = async (event) => {
            const fileInput = event.target;
            if (fileInput.files.length > 0) {
              try {
                await uploadStationFile(stationId, fileInput.files[0], user.uid);
                loadStation(); // Recargar
              } catch (error) {
                showError(error.message);
              }
            }
          };
          
          window.handleDeleteFile = async (fileName) => {
            if (confirm('¬øEst√°s seguro de eliminar este archivo?')) {
              try {
                await deleteStationFile(stationId, fileName, user.uid);
                loadStation(); // Recargar
              } catch (error) {
                showError(error.message);
              }
            }
          };
          
          window.handleToggleVisibility = async (e) => {
            try {
              await updateStation(stationId, { isPublic: e.target.checked }, user.uid);
              loadStation(); // Recargar
            } catch (error) {
              showError(error.message);
            }
          };
        }
      } catch (error) {
        showError('Error al cargar la estaci√≥n');
      }
    }
    
    // Funciones de utilidad
    function getFileIcon(fileType) {
      if (!fileType) return 'üìÑ';
      if (fileType.includes('image')) return 'üñºÔ∏è';
      if (fileType.includes('video')) return 'üé¨';
      if (fileType.includes('audio')) return 'üéµ';
      if (fileType.includes('pdf')) return 'üìï';
      return 'üìÑ';
    }
    
    function formatFileSize(bytes) {
      if (!bytes) return '0 KB';
      if (bytes < 1024) return bytes + ' B';
      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
      return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
    }
    
    function showError(message) {
      contentEl.innerHTML += `
        <div class="error-message">
          ${message}
        </div>
      `;
    }
    
    // Iniciar carga
    loadStation();
  </script>
</Layout>

<style>
  /* Tus estilos existentes */
  .station-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .error-message {
    color: red;
    margin: 1rem 0;
    padding: 1rem;
    background: rgba(255, 0, 0, 0.1);
    border-radius: 4px;
  }
  
  /* A√±ade aqu√≠ el resto de tus estilos */
</style>