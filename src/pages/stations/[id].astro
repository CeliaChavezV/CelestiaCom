---
import Layout from '../../layouts/Layout.astro';
import { 
  getStationById, 
  updateStation, 
  deleteStation, 
  uploadStationFile, 
  deleteStationFile, 
  getPublicStations 
} from '../../lib/stations';
import { getCurrentUser } from '../../lib/auth';

export async function getStaticPaths() {
  // Obtener todas las estaciones p√∫blicas para pre-renderizar
  const publicStations = await getPublicStations();
  
  return publicStations.map(station => ({
    params: { id: station.id },
    props: { station }
  }));
}

const { id } = Astro.params;
const { station: staticStation } = Astro.props;
let station = staticStation;
const user = getCurrentUser();
const isOwner = user && station?.ownerId === user.uid;

// Si la estaci√≥n no est√° pre-renderizada (ej: estaci√≥n privada), cargarla din√°micamente
if (!station && typeof window !== 'undefined') {
  station = await getStationById(id);
}

if (!station) {
  return Astro.redirect('/404');
}

let error = null;
let success = null;

const handleDeleteStation = async () => {
  if (!isOwner) return;
  
  if (confirm('¬øEst√°s seguro de eliminar esta estaci√≥n? Esta acci√≥n no se puede deshacer.')) {
    try {
      await deleteStation(id, user.uid);
      window.location.href = '/';
    } catch (err) {
      error = err.message;
    }
  }
};

const handleFileUpload = async (event) => {
  if (!isOwner) return;
  
  const fileInput = event.target;
  const files = fileInput.files;
  
  if (files.length > 0) {
    try {
      await uploadStationFile(id, files[0], user.uid);
      success = 'Archivo subido correctamente';
      error = null;
      fileInput.value = '';
      station = await getStationById(id);
    } catch (err) {
      error = err.message;
      success = null;
    }
  }
};

const handleDeleteFile = async (fileName) => {
  if (!isOwner) return;
  
  if (confirm('¬øEst√°s seguro de eliminar este archivo?')) {
    try {
      await deleteStationFile(id, fileName, user.uid);
      success = 'Archivo eliminado correctamente';
      error = null;
      station = await getStationById(id);
    } catch (err) {
      error = err.message;
      success = null;
    }
  }
};

const handleToggleVisibility = async (e) => {
  if (!isOwner) return;
  
  try {
    await updateStation(id, { isPublic: e.target.checked }, user.uid);
    success = 'Visibilidad actualizada';
    error = null;
    station.isPublic = e.target.checked;
  } catch (err) {
    error = err.message;
    success = null;
  }
};
---

---

<Layout title={`${station.name} | CelestiaCom`}>
  <main class="station-detail">
    <h1>{station.name}</h1>
    <p class="description">{station.description}</p>
    
    {station.files?.length > 0 && (
      <section class="files-section">
        <h2>Archivos</h2>
        <div class="files-grid">
          {station.files.map(file => (
            <div class="file-card">
              <a href={file.url} target="_blank" class="file-link">
                <span class="file-icon">{getFileIcon(file.type)}</span>
                <span class="file-name">{file.name}</span>
              </a>
              {isOwner && (
                <button 
                  on:click={() => handleDeleteFile(file.name)} 
                  class="delete-button"
                >
                  Eliminar
                </button>
              )}
            </div>
          ))}
        </div>
      </section>
    )}
    
    {isOwner && (
      <section class="upload-section">
        <h2>Subir nuevo archivo</h2>
        <input 
          type="file" 
          id="file-upload" 
          on:change={handleFileUpload}
        />
        <label for="file-upload" class="upload-button">
          Seleccionar archivo
        </label>
      </section>
    )}
  </main>
</Layout>

<style>
  .station-detail {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .description {
    color: var(--text-secondary);
    margin-bottom: 2rem;
  }
  
  .files-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
  }
  
  .file-card {
    background: var(--card-bg);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .file-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-decoration: none;
    color: inherit;
    margin-bottom: 0.5rem;
  }
  
  .file-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }
  
  .file-name {
    text-align: center;
    word-break: break-word;
  }
  
  .delete-button {
    background: var(--error-color);
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }
  
  .delete-button:hover {
    background: var(--error-dark);
  }
  
  .upload-section {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
  }
  
  #file-upload {
    display: none;
  }
  
  .upload-button {
    display: inline-block;
    background: var(--accent-color);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }
  
  .upload-button:hover {
    background: var(--accent-dark);
  }
</style>

<script>
  function getFileIcon(fileType) {
    if (!fileType) return 'üìÑ';
    
    if (fileType.includes('image')) return 'üñºÔ∏è';
    if (fileType.includes('video')) return 'üé¨';
    if (fileType.includes('audio')) return 'üéµ';
    if (fileType.includes('pdf')) return 'üìï';
    
    return 'üìÑ';
  }
</script>